<div>
  <input type="file" (change)="onFileSelected($event)" accept=".json">

  <table mat-table [dataSource]="dataSource" class="mat-elevation-z8">
    <ng-container matColumnDef="projectKey">
      <th mat-header-cell *matHeaderCellDef> Project Key </th>
      <td mat-cell *matCellDef="let element"> {{ element.projectKey }} </td>
    </ng-container>

    <ng-container matColumnDef="projectName">
      <th mat-header-cell *matHeaderCellDef> Project Name </th>
      <td mat-cell *matCellDef="let element"> {{ element.projectName }} </td>
    </ng-container>

    <ng-container matColumnDef="applicationName">
      <th mat-header-cell *matHeaderCellDef> Application Name </th>
      <td mat-cell *matCellDef="let element"> {{ element.applicationName }} </td>
    </ng-container>

    <ng-container matColumnDef="component">
      <th mat-header-cell *matHeaderCellDef> Component </th>
      <td mat-cell *matCellDef="let element"> {{ element.component }} </td>
    </ng-container>

    <ng-container matColumnDef="section">
      <th mat-header-cell *matHeaderCellDef> Section </th>
      <td mat-cell *matCellDef="let element"> {{ element.section }} </td>
    </ng-container>

    <ng-container matColumnDef="componentCount">
      <th mat-header-cell *matHeaderCellDef> Component Count </th>
      <td mat-cell *matCellDef="let element"> {{ element.componentCount }} </td>
    </ng-container>

    <ng-container matColumnDef="importCount">
      <th mat-header-cell *matHeaderCellDef> Import Count </th>
      <td mat-cell *matCellDef="let element"> {{ element.importCount }} </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>
</div>


















import { Component } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';

interface ComponentData {
  projectKey: string;
  projectName: string;
  applicationName: string;
  component: string;
  section: string;
  componentCount: number;
  importCount: number;
}

@Component({
  selector: 'app-json-viewer',
  templateUrl: './json-viewer.component.html',
  styleUrls: ['./json-viewer.component.css']
})
export class JsonViewerComponent {
  displayedColumns: string[] = ['projectKey', 'projectName', 'applicationName', 'component', 'section', 'componentCount', 'importCount'];
  dataSource = new MatTableDataSource<ComponentData>([]);

  onFileSelected(event: any): void {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const fileContent = e.target?.result as string;
        try {
          const jsonData = JSON.parse(fileContent);
          this.parseJson(jsonData);
        } catch (error) {
          console.error('Invalid JSON file', error);
        }
      };
      reader.readAsText(file);
    }
  }

  parseJson(json: any): void {
    const tableData: ComponentData[] = [];

    for (const projectKey in json) {
      if (json.hasOwnProperty(projectKey)) {
        const project = json[projectKey];
        const projectName = project.spec.projectName;
        const applicationName = project.spec.applicationName;

        for (const component in project.components) {
          if (project.components.hasOwnProperty(component)) {
            const sections = project.components[component];

            for (const section in sections) {
              if (sections.hasOwnProperty(section)) {
                tableData.push({
                  projectKey,
                  projectName,
                  applicationName,
                  component,
                  section,
                  componentCount: sections[section].componentCount,
                  importCount: sections[section].importCount
                });
              }
            }
          }
        }
      }
    }

    this.dataSource.data = tableData;
  }
}
